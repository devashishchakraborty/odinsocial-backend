// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  content      String
  published    Boolean   @default(true)
  author       User      @relation(fields: [authorId], references: [id])
  authorId     Int
  comments     Comment[]
  bookmarkedBy User[]    @relation("Bookmarks")
  likedBy      User[]    @relation("Likes")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  replies   Reply[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
}

model Profile {
  id       Int     @id @default(autoincrement())
  bio      String?
  imageUrl String?
  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @unique
}

model User {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  email           String   @unique
  name            String
  password        String
  posts           Post[]
  profile         Profile?
  bookmarkedPosts Post[]   @relation("Bookmarks")
  likedPosts      Post[]   @relation("Likes")
  following       Follow[] @relation("FollowingRelation")
  followers       Follow[] @relation("FollowerRelation")
}

model Follow {
  id          Int  @id @default(autoincrement())
  follower    User @relation("FollowingRelation", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("FollowerRelation", fields: [followingId], references: [id])
  followingId Int

  @@unique([followerId, followingId])
}
